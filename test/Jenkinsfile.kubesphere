pipeline {
   environment {
      KUBECONFIG = '/root/.kube/config'
      IMAGE_NAME = 'kubespheredev/s2ioperator:v2.1.0'
    }

  agent {
    kubernetes {
      label 'go'
    }

  }

  stages {
    stage('install utils'){
      steps{
        container('go'){
          sh 'yum install openssl openssl-devel jq -y'
        }
      }
    }
    stage('set kubeconfig'){
     steps{
       container('go'){
          sh 'mkdir -p ~/.kube'
          withCredentials([kubeconfigContent(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_CONTENT')]) {
            sh 'echo "$KUBECONFIG_CONTENT" > ~/.kube/config'
          }
        }
      }
    }
    stage('test') {
      steps {
       container('go'){
         withCredentials([usernamePassword(passwordVariable : 'DOCKER_PASSWORD' ,usernameVariable : 'DOCKER_USERNAME' ,credentialsId : "dockerhub-id" ,)]) {
            sh 'echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin'
         }
         withCredentials([usernamePassword(passwordVariable : 'DOCKER_PASSWORD' ,usernameVariable : 'DOCKER_USERNAME' ,credentialsId : "sed-dockerhub-id" ,)]) {
            sh  "sed -i.bak 's#UserShouldEnterUserName#$DOCKER_USERNAME#' ./config/samples/autoscale/*.yaml"
            sh  "sed -i.bak 's#UserShouldEnterUserPassword#$DOCKER_PASSWORD#' ./config/samples/autoscale/*.yaml"
         }
         withCredentials([usernamePassword(passwordVariable : 'DOCKER_PASSWORD' ,usernameVariable : 'DOCKER_USERNAME' ,credentialsId : "sed-dockerhub-id" ,)]) {
            sh  "sed -i.bak 's#UserShouldEnterUserName#$DOCKER_USERNAME#' ./config/samples/b2i/*.yaml"
            sh  "sed -i.bak 's#UserShouldEnterUserPassword#$DOCKER_PASSWORD#' ./config/samples/b2i/*.yaml"
         }
         withCredentials([string(credentialsId: 'dockerconfig',variable: 'DOCKERCONFIG')]){
            sh  "sed -i.bak 's#UserShouldEnterBase64DockerConfig#$DOCKERCONFIG#' ./config/samples/secret/*.yaml"
         }
         withCredentials([usernamePassword(passwordVariable : 'GIT_PASSWORD' ,usernameVariable : 'GIT_USERNAME' ,credentialsId : "git" ,)]) {
            sh  "sed -i.bak 's#UserShouldEnterBase64Username#$GIT_USERNAME#' ./config/samples/git-secret/*.yaml"
            sh  "sed -i.bak 's#UserShouldEnterBase64Password#$GIT_PASSWORD#' ./config/samples/git-secret/*.yaml"
         }

            sh '''
    mkdir -p /home/jenkins/go/src/github.com/kubesphere
    ln -s `pwd` /home/jenkins/go/src/github.com/kubesphere/s2ioperator
    cd /home/jenkins/go/src/github.com/kubesphere/s2ioperator
    make manager
    '''
            lock('s2ioperator')  {
              sh "make e2e-test"
            }
        }
      }
    }

    stage('docker push') {
      when{
        branch 'master'
      }
      steps {
      container('go'){
        sh "cd /home/jenkins/go/src/github.com/kubesphere/s2ioperator"
        sh "docker build -f deploy/Dockerfile -t $IMAGE_NAME bin/"
        withCredentials([usernamePassword(passwordVariable : 'DOCKER_PASSWORD' ,usernameVariable : 'DOCKER_USERNAME' ,credentialsId : "dockerhub-id" ,)]) {
          sh 'echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin'
          sh 'docker push $IMAGE_NAME'
        }
      }
    }
  }
}
}
